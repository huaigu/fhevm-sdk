/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface FHECounterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "callbackDecryptCount"
      | "decrement"
      | "getCount"
      | "getDecryptedCount"
      | "getDecryptionRequester"
      | "increment"
      | "isDecryptionCompleted"
      | "protocolId"
      | "requestDecryptCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecryptionCompleted"
      | "DecryptionFulfilled"
      | "DecryptionRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "callbackDecryptCount",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decrement",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getDecryptedCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptionRequester",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increment",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDecryptionCompleted",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestDecryptCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "callbackDecryptCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decrement", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptionRequester",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "increment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDecryptionCompleted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestDecryptCount",
    data: BytesLike
  ): Result;
}

export namespace DecryptionCompletedEvent {
  export type InputTuple = [
    requestId: BigNumberish,
    decryptedValue: BigNumberish
  ];
  export type OutputTuple = [requestId: bigint, decryptedValue: bigint];
  export interface OutputObject {
    requestId: bigint;
    decryptedValue: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionRequestedEvent {
  export type InputTuple = [requestId: BigNumberish, requester: AddressLike];
  export type OutputTuple = [requestId: bigint, requester: string];
  export interface OutputObject {
    requestId: bigint;
    requester: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FHECounter extends BaseContract {
  connect(runner?: ContractRunner | null): FHECounter;
  waitForDeployment(): Promise<this>;

  interface: FHECounterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  callbackDecryptCount: TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  decrement: TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  getCount: TypedContractMethod<[], [string], "view">;

  getDecryptedCount: TypedContractMethod<
    [requestId: BigNumberish],
    [bigint],
    "view"
  >;

  getDecryptionRequester: TypedContractMethod<
    [requestId: BigNumberish],
    [string],
    "view"
  >;

  increment: TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;

  isDecryptionCompleted: TypedContractMethod<
    [requestId: BigNumberish],
    [boolean],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  requestDecryptCount: TypedContractMethod<[], [bigint], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "callbackDecryptCount"
  ): TypedContractMethod<
    [
      requestId: BigNumberish,
      cleartexts: BytesLike,
      decryptionProof: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decrement"
  ): TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCount"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getDecryptedCount"
  ): TypedContractMethod<[requestId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDecryptionRequester"
  ): TypedContractMethod<[requestId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "increment"
  ): TypedContractMethod<
    [inputEuint32: BytesLike, inputProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isDecryptionCompleted"
  ): TypedContractMethod<[requestId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "requestDecryptCount"
  ): TypedContractMethod<[], [bigint], "nonpayable">;

  getEvent(
    key: "DecryptionCompleted"
  ): TypedContractEvent<
    DecryptionCompletedEvent.InputTuple,
    DecryptionCompletedEvent.OutputTuple,
    DecryptionCompletedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionRequested"
  ): TypedContractEvent<
    DecryptionRequestedEvent.InputTuple,
    DecryptionRequestedEvent.OutputTuple,
    DecryptionRequestedEvent.OutputObject
  >;

  filters: {
    "DecryptionCompleted(uint256,uint32)": TypedContractEvent<
      DecryptionCompletedEvent.InputTuple,
      DecryptionCompletedEvent.OutputTuple,
      DecryptionCompletedEvent.OutputObject
    >;
    DecryptionCompleted: TypedContractEvent<
      DecryptionCompletedEvent.InputTuple,
      DecryptionCompletedEvent.OutputTuple,
      DecryptionCompletedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "DecryptionRequested(uint256,address)": TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
    DecryptionRequested: TypedContractEvent<
      DecryptionRequestedEvent.InputTuple,
      DecryptionRequestedEvent.OutputTuple,
      DecryptionRequestedEvent.OutputObject
    >;
  };
}
